plugins {
    id 'io.spring.dependency-management' version "1.0.4.RELEASE"
    id 'org.scoverage'
}

repositories {
    jcenter()
}

description = 'a single-module Scala project with dependency manager that builds successfully with 100% coverage'

apply plugin: 'scala'


dependencyManagement {
    dependencies {
        dependency group: 'org.scala-lang', name: 'scala-library', version: "${scalaVersionMajor}.${scalaVersionMinor}.${scalaVersionBuild}"
    }
}

dependencies {
    compile group: 'org.scala-lang', name: 'scala-library'

    // scala compilation with the dependency management plugin needs this (otherwise compilation will fail)
    zinc group: 'com.typesafe.zinc', name: 'zinc', version: '0.3.15'
    zinc group: 'org.scala-lang', name: 'scala-library', version: '2.10.5'

    testRuntime group: 'org.junit.vintage', name: 'junit-vintage-engine', version: junitVersion
    testCompile group: 'org.junit.platform', name: 'junit-platform-runner', version: junitPlatformVersion

    testCompile group: 'org.scalatest', name: "scalatest_${scalaVersionMajor}.${scalaVersionMinor}", version: scalatestVersion
}

test {
    useJUnitPlatform()
}


configurations {
    intTestCompile.extendsFrom testCompile
    intTestRuntime.extendsFrom testRuntime
}
sourceSets {
    intTest {
        resources.srcDir file('src/intTest/resources')
        scala {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file("${projectDir}/src/intTest/scala")
        }
    }
}

test {
    maxParallelForks = 1
}

task intTest(type: Test) {
    testClassesDirs = sourceSets.intTest.output.classesDirs
    classpath = sourceSets.intTest.runtimeClasspath
    outputs.upToDateWhen { false }

    maxParallelForks = 1
}
check.dependsOn(intTest)
intTest.mustRunAfter(test)

scoverage {
    minimumRate = 0.6
}

if (hasProperty("excludedFile")) {
    scoverage.excludedFiles = [excludedFile]
}
